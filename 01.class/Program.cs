using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
/*
 * 어느정도 프로그램을 배운 사람이라면 자료형 같은걸 먼저 배웠겠지만
 * C#은 그럴 수 없다.
 * 고지식한 객체지향 언어이며
 * C#은 클래스의 노예이다.
 * 모든건 클래스로 통한다.
 * 
 * 다른건 안그럴 수 있는데 C#은 클래스를 설명하지 않고는
 * 설명하는 것에 의미가 전부 없어진다.
 */

/*앞으로 게임을 만들고 싶을 것이다.
 * 게임이라는 것은 굉장히 다양한 개념들을 품고 있다.
 * ex)Job, Level, MP, HP, Quest, enemy, waepon, armor etc...
 * 
 * 객체지향은 저 중에서 적절히 묶어서 class화 시킨다.
 * 자신이 만들고자 하는 게임의 속성과 개념을 먼저 생각해야하고
 * 그것을 표현하는 것이 'class'이다.
 */

//객체지향 프로그램의 가장 핵심적인 내용을 설명해야 한다.
//몬스터가 필요하다->몬스터 class를 만든다.
//class안에 뭐가 들어가는지보다 class만드는 것부터 익숙해지자
//class(클래스를 선언하기 위한 키워드) 이름
/*{<-클래스의 내용의 시작
 * }
 */
class Monster
{
    //안에 있는 것은 그리 중요하지 않다. 
}

//주인공을 따라다지는 펫을 만들고 싶다?
class Pet
{
    //내부의 내용은 중요하지 않다.
}
//뭐가 필요하든 class를 만들자.
/*객체지향 -> 
 * 내가 표현하고 싶은걸 클래스로 만들어서
 * 그 클래스로 객체를 만드는 프로그래밍이다.
 * 즉 객체로 모든 것을 해결해야 하기 때문에
 * 객체를 지향할 수 밖에 없는 프로그래밍
 */

//rpg를 만들고 싶고 거기의 플레이어가 필요하다?
class Player
{
    //우선 class를 만들고 그 플레이어에 따른 무언갈 만들자.
}
//Player class를 만들자@@@@@@@@@@@@@@

//어떻게 구현할 지에 대해서 생각은 나중에 하고 일단 class를 만들고 보자.
//나중에 숙련자들은 구현과 개념이 분리되지 않지만 아직은 그런 단계가 아니다.
//일단 #시작#부터 하자.
//인벤토리 어떻게 만들지? 어떻게 구현하지? 라고 생각하기 전에
class Inven
{

}
//지금은 일단 class를 만들자

/*player class를 만들게 되면 player class는
 * 내가 생각한 개념이
 * 내 프로그램에서 사용되어 지기 위한
 * 설계도를 의미한다.
 * 즉 설계도를 만들어야 내용물을 채울 수 있다.
 * 코딩에서는 무조건 설계도가 먼저이며
 * 이 설계도를 만드는 것이 @@클래스@@이다.
 * 항상 클래스 -> 객체 순으로 해야한다.
 */