using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
 * 문법을 공부할 때
 * 응용법까지 욕심을 내는 경우가 있다.
 * 게임프로그래밍이나 실제 코드를 짜면서 보기 전 까지는
 * 응용에 대해 느낄 수 없다.
 * 숫자를 배웠을 때 1~10을 어디에 쓸 수 있나요 라고 물어보는 것과
 * 같은 이치이다.
 * 
 * 문법 공부 이후는 응용의 문제이다.
 */

/*
 * 프로그래머가 2명이라고 예를 들고
 * rpg를 만든다고 해보자.
 * 항목을 뽑아내서
 * 몬스터, 무기, 아이템 등을 나눴다.
 * 프로그래머1이 HP포션을 만든다로 했다고 하자.
 */
//1프로그래머가 귀찮아서 HP포션을 potion이라고 했다고 하자
class Potion//<빨간줄이 생긴다. 
{
    //플레이어가 마시면 HP가 참
}

//근데 프로그래머2도 potion이라고 클래스를 선언했다.
class Potion//<빨간줄이 생긴다. 
{
    //플레이어가 마시면 MP가 참
}

/*
 * 클래스의 이름들은 "식별자"라고 한다.
 * 어떤 코드적 내용을 묶어 하나의 명칭으로 한 것.
 * 
 * 이렇게 식별자가 겹치면
 * 사용할 때 "Potion쓸게~"하고 썼는데
 * MP포션인지HP인지 햇갈릴 수 없게 된다.
 * 이럴 때 쓸 수 있는게 Namespace
 * 네임스페이스는 개념의 표현이라기보단
 * 개념의 분류
 */

namespace Apro
{
    class /*Apro.*/Potion //<Apro.이 자동으로 붙는다 생각하면 된다.
    {
        //플레이어가 마시면HP가 참
    }
}

namespace Bpro
{
    class /*Bpro.*/Potion //<Bpro.이 자동으로 붙는다 생각하면 된다.
    {
        //플레이어가 마시면MP가 참
    }
}
/* 이름은 상식적으로 만드는 것이 좋다.
 * 즉 개념이 여러가지로 겹칠 때 namespace로
 * 분류를 할 수 있다는 것이다.
 * 
 * 물론 class를 제대로 분류 잘 해놨음 상관
 * 없겠지만 
 */